@using System.Web.Optimization
@model MyCBA.Core.Models.SavingsAcctMgt
@{
    ViewBag.Title = "Savings Account Configuration";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("Savings", "AccountConfiguration", FormMethod.Post))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal col-md-6">
    @if (ViewBag.Message != null)
    {
        if (ViewBag.Message == "Error")
        {
            <div class="alert alert-danger">
                <strong>Configuration Failed</strong>
            </div>
        }
        else if (ViewBag.Message == "Success")
        {
            <div class="alert alert-success">
                <strong>Configuration Successful</strong>
            </div>
        }
    }
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <span id="error" class="text-red"></span>
        <div class="form-group">
            @Html.LabelFor(model => model.SavingsCreditInterestRate)
            <label>(in %)</label>
            @Html.EditorFor(model => model.SavingsCreditInterestRate, new { htmlAttributes = new { @class = "form-control", type = "number", step = "any", min = "0.00" } })
            @Html.ValidationMessageFor(model => model.SavingsCreditInterestRate, "", new { @class = "text-danger" })
            <span id="creditinterestrateerror" class="text-red"></span>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SavingsMinimumBalance)
            <label>(in naira)</label>
            @Html.EditorFor(model => model.SavingsMinimumBalance, new { htmlAttributes = new { @class = "form-control", type = "number", step = "any", min = "0.00" } })
            @Html.ValidationMessageFor(model => model.SavingsMinimumBalance, "", new { @class = "text-danger" })
            <span id="minbalanceerror" class="text-red"></span>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SavingsInterestExpenseGLId)
            @Html.DropDownListFor(model => model.SavingsInterestExpenseGLId, new SelectList(Model.SavingsInterestExpense,
               "id", "Name"),"Choose an Option", new {@class = "form-control", @data_live_search = "true" })
            @Html.ValidationMessageFor(model => model.SavingsInterestExpenseGLId, "", new { @class = "text-danger" })
            <span id="savingsinterestexpenseglerror" class="text-red"></span>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SavingsInterestPayableGLId)
            @Html.DropDownListFor(model => model.SavingsInterestPayableGLId, new SelectList(Model.SavingsInterestPayable,
               "id", "Name"),"Choose an Option", new {@class = "form-control", @data_live_search = "true" })
            @Html.ValidationMessageFor(model => model.SavingsInterestPayableGLId, "", new { @class = "text-danger" })
            <span id="savingsinterestexpenseglerror" class="text-red"></span>
        </div>

    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="SUBMIT" id="submit" class="btn btn-default" />
        </div>
    </div>


}
@section ViewSpecificJavascript
    {
    <script>
        //$(document).ready(function () {
        //    $('#SavingsCreditInterestRate').keyup(function () {
        //        value = $(this).val();
                
        //        var regextest = /^([0-9]+[\.]?[0-9]?[0-9]?|[0-9]+)$/g;
        //        var regexec = /^([0-9]+[\.]?[0-9]?[0-9]?|[0-9]+)/g;

        //        if (regextest.test(value)) {
                   
        //        } else {
        //            value = regexec.exec(value);
        //            if (value) {
        //                $("#creditinterestrateerror").html("");
        //            } else {
        //                $("#creditinterestrateerror").html("Credit Interest Rate can only have numbers or decimal value");
        //            }
        //        }
        //    })

        //    $('#SavingsMinimumBalance').keyup(function () {
        //        value = $(this).val();
                
        //        var regextest = /^([0-9]+[\.]?[0-9]?[0-9]?|[0-9]+)$/g;
        //        var regexec = /^([0-9]+[\.]?[0-9]?[0-9]?|[0-9]+)/g;
        //        if (regextest.test(value)) {

        //        } else {
        //            value = regexec.exec(value);
        //            if (value) {
        //                $("#minbalanceerror").html("");
        //            } else {
        //                $("#minbalanceerror").html("Minimum Balance can only have numbers or decimal value");
        //            }
        //        }
        //    })
            
        //    //$("form").submit(function (e) {

        //    //    var creditinterestrate = $('#CreditInterestRate').val();
        //    //    var minbalance = $('#MinBalance').val();
        //    //    var savingsinterestexpensegl = $('#SavingsInterestExpenseGL').val();
        //    //    if (creditinterestrate == "0.00" || minbalance == "0.00" || creditinterestrate == ""
        //    //        || minbalance == "" || savingsinterestexpensegl == "" ) {
        //    //        e.preventDefault();
        //    //        $("#error").html("Credit Interest Rate or Minimum Balance or Interest Expense GL Account is required");
        //    //    }
        //    //    else {
        //    //        $("#error").html("");
        //    //    }
        //    //})
        //})
    </script>
}